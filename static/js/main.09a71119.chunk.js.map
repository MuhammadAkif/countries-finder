{"version":3,"sources":["components/atoms/input.js","components/molecules/SearchCountry.js","components/atoms/table.js","components/atoms/table-row.js","components/atoms/table-coulmn.js","components/molecules/CountriesTable.js","queries/index.js","components/atoms/grid.js","components/atoms/grid-item.js","components/molecules/CountryDetailGrid.js","components/enzymes/Country-Detail.js","components/enzymes/Countries-Listing.js","utils/utils.js","components/templates/Countries.js","routing/Routes.js","route-definitions/index.js","route-definitions/searchRoutes.js","App.js","serviceWorker.js","index.js"],"names":["Input","children","styles","handleOnChange","placeHolder","props","placeholder","onChange","search","handleSearch","time","handler","Table","userStyles","className","Row","Column","handleOnClick","onClick","CountriesTable","columns","data","Fragment","map","col","header","country","key","code","idx","id","accessor","GET_COUNTRIES_LIST","gql","GET_COUNTRY_DETAIL","Grid","GridItem","GridDetail","countryDetail","name","native","languages","l","continent","capital","CountriesDetail","countryCode","useQuery","CountryQueries","variables","loading","error","CountriesListing","handleOnClickCountyrRow","useState","searchText","setSearchText","countries","setCountries","useEffect","e","target","value","filter","c","RegExp","test","Countries","appRoutes","type","path","exact","component","selectedCountryId","setSelectedCountryId","route","routeDef","Component","Route","Routes","client","ApolloClient","cache","InMemoryCache","uri","connectToDevTools","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.09a71119.chunk.js","sourcesContent":["import React from 'react';\nimport styles from '../../App.css';\n\nconst Input = ({\n  children, styles: userStyles = null, handleOnChange, placeHolder = 'Enter text', ...props\n}) => (\n        <input placeholder={placeHolder} onChange={handleOnChange} {...props} />\n);\n\nexport default Input;\n","import React from 'react';\nimport { Debounce } from 'react-throttle';\nimport Input from '../atoms/input';\n\nfunction search({ handleSearch }) {\n  return (\n        <Debounce time=\"200\" handler=\"onChange\">\n            <Input placeholder={'Search Country'} handleOnChange={handleSearch} />\n        </Debounce>\n  );\n}\n\nexport default search;\n","import React from 'react';\n\nconst Table = ({ children, styles: userStyles = null, ...props }) => (\n        <div className={`div_table ${userStyles}`} {...props}>\n            {children}\n        </div>\n);\n\nexport default Table;\n","import React from 'react';\nimport '../../App.css';\n\nconst Row = ({ children, styles: userStyles = null, ...props }) => (\n        <div className={`div_table_row ${userStyles}`} {...props}>\n            {children}\n        </div>\n);\n\nexport default Row;\n","import React from 'react';\nimport '../../App.css';\n\nconst Column = ({\n  children, styles: userStyles = null, handleOnClick, ...props\n}) => (\n        <div className={`div_table_col ${userStyles}`} {...props} onClick={handleOnClick}>\n            {children}\n        </div>\n);\n\nexport default Column;\n","import React from 'react';\nimport Table from '../atoms/table';\nimport Row from '../atoms/table-row';\nimport Column from '../atoms/table-coulmn';\n\nfunction CountriesTable({ columns, data, handleOnClick }) {\n  return (\n        <React.Fragment>\n\n            <Table>\n                <Row>\n                    {\n                        columns.map((col) => <Column>{col.header}</Column>)\n                    }\n                </Row>\n\n                {\n                    data.map((country) => <Row key={country.code}>\n                            {\n                                columns\n                                  .map((col, idx) => <Column\n                                        id={country.code}\n                                        handleOnClick={handleOnClick}>\n                                    { country[col.accessor] }\n                                </Column>)\n                            }\n                        </Row>)\n                }\n\n            </Table>\n        </React.Fragment>\n  );\n}\n\nexport default CountriesTable;\n","import {\n  gql,\n} from '@apollo/client';\n\nexport default {\n  GET_COUNTRIES_LIST: gql`{\n            countries {\n                code,\n                name,\n                phone,\n                emoji\n            }\n        }`,\n  GET_COUNTRY_DETAIL: gql`\n           query COUNTRY($code: ID!) {\n                country(code: $code) {\n                    name,\n                    native,\n                    continent {\n                        name\n                    },\n                    currency,\n                    languages {\n                        name,\n                        native\n                    }\n                    capital,\n                    states {\n                        name\n                    }\n                }\n            }`,\n};\n","import React from 'react';\nimport '../../App.css';\n\nconst Grid = ({ children, styles: userStyles = null, ...props }) => (\n        <div className={`grid-container ${userStyles}`} {...props}>\n            {children}\n        </div>\n);\n\nexport default Grid;\n","import React from 'react';\nimport '../../App.css';\n\nconst GridItem = ({ children, styles: userStyles = null, ...props }) => (\n        <div className={`grid-item ${userStyles}`} {...props}>\n            {children}\n        </div>\n);\n\nexport default GridItem;\n","import React from 'react';\nimport Grid from '../atoms/grid';\nimport GridItem from '../atoms/grid-item';\n\nfunction GridDetail({ countryDetail }) {\n  return (\n        <Grid>\n            <GridItem>\n                <div>Name: {countryDetail.name} </div>\n            </GridItem>\n            <GridItem>\n                <div>Native-Language: {countryDetail.native} </div>\n            </GridItem>\n            <GridItem>\n                <div>Languages: {(() => countryDetail.languages.map((l) => `${l.native}, `))()}</div>\n            </GridItem>\n            <GridItem>\n                <div>Continent: {countryDetail.continent.name} </div>\n            </GridItem>\n            <GridItem>\n                <div>Capital: {countryDetail.capital} </div>\n            </GridItem>\n        </Grid>\n  );\n}\n\nexport default GridDetail;\n","import React, { useState, useEffect } from 'react';\nimport {\n  useQuery,\n} from '@apollo/client';\nimport CountryQueries from '../../queries';\nimport CountryDetail from '../molecules/CountryDetailGrid';\n\nfunction CountriesDetail({ countryCode }) {\n  const { data, loading, error } = useQuery(CountryQueries.GET_COUNTRY_DETAIL, {\n    variables: { code: countryCode },\n  });\n\n  if (loading) return <div>Loading Details</div>;\n  if (error) return `Error! ${error}`;\n\n  if (data) {\n    return (\n            <React.Fragment>\n                <CountryDetail countryDetail={data.country} />\n            </React.Fragment>\n    );\n  }\n}\n\nexport default CountriesDetail;\n","import React, { useState, useEffect } from 'react';\nimport {\n  useQuery,\n} from '@apollo/client';\nimport Search from '../molecules/SearchCountry';\nimport CountriesTable from '../molecules/CountriesTable';\nimport CountriesDetail from './Country-Detail';\nimport CountryQueries from '../../queries';\nimport { prepareCountriesData } from '../../utils/utils';\n\nfunction CountriesListing({ handleOnClickCountyrRow }) {\n  const [searchText, setSearchText] = useState('');\n  const [countries, setCountries] = useState([]);\n\n  const handleCountriesSearch = (e) => {\n    setSearchText(\n      e.target.value,\n    );\n  };\n\n  const handleColumnClick = (e) => {\n    handleOnClickCountyrRow(e.target.id);\n  };\n\n  const { data, loading, error } = useQuery(CountryQueries.GET_COUNTRIES_LIST);\n  useEffect(() => {\n    if (data) setCountries(data.countries);\n  }, [data]);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error... {error}</div>;\n\n  if (data) {\n    const columns = prepareCountriesData();\n    return (\n            <React.Fragment>\n                <Search handleSearch={handleCountriesSearch}/>\n                <CountriesTable handleOnClick={handleColumnClick} columns={columns} data = {\n                    searchText ? countries.filter((c) => new RegExp(searchText, 'ig').test(c.name)) : countries\n                } />\n            </React.Fragment>\n    );\n  }\n}\n\nexport default CountriesListing;\n","export const prepareCountriesData = () => [{\n  header: 'Name',\n  accessor: 'name',\n}, {\n  header: 'Phone',\n  accessor: 'phone',\n}, {\n  header: 'Flag',\n  accessor: 'emoji',\n}];\n","import React, { useState, useEffect } from 'react';\nimport CountriesListing from '../enzymes/Countries-Listing';\nimport CountriesDetail from '../enzymes/Country-Detail';\n\nfunction Countries() {\n  const [selectedCountryId, setSelectedCountryId] = useState(null);\n  const handleOnClickCountyrRow = (id) => {\n    setSelectedCountryId(id);\n  };\n  return (\n        <React.Fragment>\n            <CountriesListing handleOnClickCountyrRow={handleOnClickCountyrRow} />\n            { selectedCountryId ? <CountriesDetail\n                countryCode={selectedCountryId} /> : null }\n        </React.Fragment>\n  );\n}\n\nexport default Countries;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { routes } from '../route-definitions';\n\nconst appRoutes = (() => (\n  routes.map((route) => (\n    route.map((routeDef) => {\n      const Component = routeDef.type === 'PRIVATE' ? <div>Dummy Priovate Comp</div> : Route;\n      return <Component {...routeDef.props} />;\n    })\n  ))\n))();\nconst Routes = () => <Switch>{appRoutes}</Switch>;\n\nexport default Routes;\n","import searchRoutes from './searchRoutes';\n\nconst routes = [\n  searchRoutes,\n];\n\nexport {\n  routes,\n};\n","import Countries from '../components/templates/Countries';\n\nconst searchRoutes = [\n  {\n    type: 'PUBLIC',\n    props: {\n      path: '/',\n      exact: true,\n      component: Countries,\n    },\n  },\n];\n\nexport default searchRoutes;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport {\n  ApolloProvider, ApolloClient, InMemoryCache,\n} from '@apollo/client';\nimport Routes from './routing/Routes';\nimport './App.css';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com',\n  connectToDevTools: true,\n});\n\nconst App = () => (\n        <BrowserRouter>\n            <ApolloProvider client={client}>\n                <Routes />\n            </ApolloProvider>\n        </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}